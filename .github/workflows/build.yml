name: C++ CI with Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  docker-build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set Execute Permissions on Shell Script
      run: chmod +x docker-run.sh

    - name: Build Docker Image
      run: ./docker-run.sh build

    - name: Run Server in Docker
      run: |
        ./docker-run.sh server &
        sleep 10 # Allow server time to start

    - name: Run Client in Docker
      run: ./docker-run.sh client -i # Example: Replace `-i` with desired client mode or options

    - name: Clean Up Docker Resources
      if: always()
      run: ./docker-run.sh clean

  docker-coverage:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set Execute Permissions on Shell Script
      run: chmod +x docker-run.sh

    - name: Build Docker Image with Coverage
      run: ./docker-run.sh build

    - name: Run Tests in Docker
      run: |
        ./docker-run.sh server &
        sleep 10 # Wait for the server to start
        ./docker-run.sh client --test-coverage

    - name: Generate and Upload Coverage Report
      run: |
        lcov --directory build --capture --output-file coverage.info
        lcov --remove coverage.info '/usr/*' '*/test/*' '*/build/_deps/*' --output-file coverage.filtered.info
        lcov --list coverage.filtered.info
      env:
        COVERAGE_DIR: ./coverage
      uses: actions/upload-artifact@v3
      with:
        name: code-coverage-report
        path: ./coverage/coverage.filtered.info
        retention-days: 30

  sanitizer-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Install Dependencies for Sanitizers
      run: sudo apt-get update && sudo apt-get install -y clang

    - name: Build Docker Image with Sanitizer
      run: ./docker-run.sh build

    - name: Run ASAN Tests in Docker
      run: ./docker-run.sh client --asan

